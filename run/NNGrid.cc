//
// Authors: Rabah Abdul Khalek: rabah.khalek@gmail.com
//          Valerio Bertone: valerio.bertone@cern.ch
//          Emanuele R. Nocera: emanuele.nocera@ed.ac.uk
//

#include <apfel/apfelxx.h>
#include <LHAPDF/LHAPDF.h>
#include <yaml-cpp/yaml.h>
#include <NNAD/FeedForwardNN.h>

#include <iostream>
#include <functional>
#include <fstream>
#include <algorithm>

typedef std::pair<std::vector<double>, double> PVD;
typedef std::vector<PVD> VPVD;
typedef std::vector<std::vector<double> > VV;

bool wayToSort(PVD i, PVD j)
{
  return i.second < j.second;  //ascending order
}

int main(int argc, char *argv[])
{
  if (argc < 2)
    {
      std::cerr << "Usage: " << argv[0] << " <path to fit folder> [<hadron> (default: PIp, options: PIp, PIm, PIsum)] [<set name> (default: LHAPDFSet)] [<Nmembers> (default: all)]" << std::endl;
      exit(-1);
    }

  // Path to result folder
  const std::string ResultFolder = argv[1];

  // Name of the set
  std::string hadron = "PIp";
  if (argc >= 3)
    hadron = argv[2];

  std::string OutName = "LHAPDFSet";
  if (argc >= 4)
    OutName = argv[3];

  // Read Input Card
  YAML::Node config = YAML::LoadFile(ResultFolder + "/config.yaml");

  // Retrive best-fit paramaters
  YAML::Node bestfits = YAML::LoadFile(ResultFolder + "/BestParameters.yaml");

  VPVD AllPars;
  VV BestPars;

  // Load all parameters and pair them with the total chi2 value for sorting
  for (auto const &rep : bestfits)
    AllPars.push_back(PVD(rep["parameters"].as<std::vector<double> >(), rep["total chi2"].as<double>()));

  // Sort sets of parameters according to the chi2
  sort(AllPars.begin(), AllPars.end(), wayToSort);

  int Nmembers = 0;
  if (argc >= 5)
    {
      Nmembers = std::stoi(argv[4]);
      std::cout << "Nmembers requested = " << Nmembers << std::endl;
    }
  else
    Nmembers = AllPars.size();

  // Pick the lowest Nmembers of the chi2-sorted replicas
  int i = 0;
  for (auto const &rep : AllPars)
    {
      if (i == Nmembers)
        break;

      BestPars.push_back(rep.first);
      i++;
    }
  if (i < Nmembers)
    {
      std::cerr << "Requested more replicas than available." << std::endl;
      exit(-1);
    }

  // Construct rotation matrix to obtain FFs in the evolution basis
  // that is what is fed to APFEL++ to do the evolution.
  const std::vector<int> Architecture = config["NNAD"]["architecture"].as<std::vector<int>>();

  // Rotation from physical to QCD-evolution basis
  std::vector<double> R;
  for (int i = 0; i < 13; i++)
    for (int j = 0; j < 13; j++)
      R.push_back(apfel::RotPhysToQCDEvFull[i][j]);

  // Combine rotation matrix with the flavour map
  nnad::Matrix<double> FlavourMapT{Architecture.back(), 13, config["NNAD"]["flavour map"].as<std::vector<double>>()};

  // Calculate the (Moore-Penrose) pseudo-inverse of the flavour map
  if(config["NNAD"]["combine"])
    {
      if(config["NNAD"]["combine"].as<bool>())
        FlavourMapT = FlavourMapT.PseudoInverse_LLR();
      else
        FlavourMapT.Transpose();
    }
  else
    FlavourMapT.Transpose();
  nnad::Matrix<double> Rotation = FlavourMapT; //nnad::Matrix<double> {13, 13, R} * FlavourMapT;

  // Whether the output is linear or quadratic
  const int OutputFunction = (config["NNAD"]["output function"] ? config["NNAD"]["output function"].as<int>() : 1);

  // Initialise neural network
  nnad::FeedForwardNN<double> NN{Architecture, 0, false};

  // APFEL++ EvolutionSetup object
  apfel::EvolutionSetup es{};

  // Adjust evolution parameters
  es.Virtuality        = apfel::EvolutionSetup::Virtuality::TIME;
  es.Q0                = config["Predictions"]["mu0"].as<double>();
  es.PerturbativeOrder = config["Predictions"]["perturbative order"].as<int>();
  es.QQCDRef           = config["Predictions"]["alphas"]["Qref"].as<double>();
  es.AlphaQCDRef       = config["Predictions"]["alphas"]["aref"].as<double>();
  es.Thresholds        = config["Predictions"]["thresholds"].as<std::vector<double>>();
  es.Masses            = es.Thresholds;
  es.Qmin              = 1;
  es.Qmax              = 1000;
  es.name              = OutName;
  es.GridParameters    = {{100, 1e-2, 3}, {150, 1e-1, 3}, {100, 6e-1, 3}, {50, 8e-1, 3}};
  es.InSet.clear();

  // NN Parameterisation. First compute the average.
  std::vector<std::function<std::map<int, double>(double const&, double const&)>> sets
  {
    [&] (double const& x, double const&) -> std::map<int, double>
    {
      // Initialise map in the QCD evolution basis
      std::map<int, double> EvMap{{0, 0}, {1, 0}, {2, 0}, {3, 0}, {4, 0}, {5, 0}, {6, 0}, {7, 0}, {8, 0}, {9, 0}, {10, 0}, {11, 0}, {12, 0}};

      // Number of replicas used for the average
      const int nr = BestPars.size();

      // Now run over all replicas and accumulated
      for (auto p: BestPars)
        {
          // Set NN parameters
          NN.SetParameters(p);

          // Call NN at x and 1
          const std::vector<double> nn1 = NN.Evaluate({1});
          std::vector<double> nnx = NN.Evaluate({x});

          // Subtract the NN at 1 to ensure NN(x = 1) = 0.
          std::transform(nnx.begin(), nnx.end(), nn1.begin(), nnx.begin(), std::minus<double>());

          // If _OutputFunction == 2 square the output vector.
          if (OutputFunction == 2)
            std::transform(nnx.begin(), nnx.end(), nnx.begin(), nnx.begin(), std::multiplies<double>());

          // Rotate into the evolution basis
          const nnad::Matrix<double> nnv = Rotation * nnad::Matrix<double> {Architecture.back(), 1, nnx};

          // Fill in map
          for (int i = 0; i < 13; i++)
            {
              if (!hadron.compare("PIm"))
                EvMap[i] += (!(i % 2) && i != 0 ? -1 : 1) * nnv.GetElement(i, 0) / nr;
              else if (!hadron.compare("PIsum"))
                EvMap[i] += (!(i % 2) && i != 0 ? 0 : 2) * nnv.GetElement(i, 0) / nr;
              else //PIp
                EvMap[i] += nnv.GetElement(i, 0) / nr;
            }
        }
      return EvMap;
    }
  };
  // Now run over replicas
  for (auto p: BestPars)
    {
      sets.push_back([&,p] (double const& x, double const&) -> std::map<int, double>
      {
        // Set NN parameters
        NN.SetParameters(p);

        // Call NN at x and 1
        const std::vector<double> nn1 = NN.Evaluate({1});
        std::vector<double> nnx = NN.Evaluate({x});

        // Subtract the NN at 1 to ensure NN(x = 1) = 0.
        std::transform(nnx.begin(), nnx.end(), nn1.begin(), nnx.begin(), std::minus<double>());

        // If _OutputFunction == 2 square the output vector.
        if (OutputFunction == 2)
          std::transform(nnx.begin(), nnx.end(), nnx.begin(), nnx.begin(), std::multiplies<double>());

        // Rotate into the evolution basis
        const nnad::Matrix<double> nnv = Rotation * nnad::Matrix<double>{Architecture.back(), 1, nnx};

        // Fill in map (ignoring top)
        std::map<int, double> EvMap;
        for (int i = 0; i < 13; i++)
          {
            if (!hadron.compare("PIm"))
              EvMap[i] += (!(i % 2) && i != 0 ? -1 : 1) * nnv.GetElement(i, 0);
            else if (!hadron.compare("PIsum"))
              EvMap[i] += (!(i % 2) && i != 0 ? 0 : 2) * nnv.GetElement(i, 0);
            else //PIp
              EvMap[i] += nnv.GetElement(i, 0);
          }

        return EvMap;
      });
    }

  std::vector<double> xgrid={0.01      , 0.0100462 , 0.01009262, 0.01013925, 0.01018609,
			      0.01023315, 0.01028043, 0.01032793, 0.01037565, 0.01042359,
			      0.01047174, 0.01052013, 0.01056873, 0.01061756, 0.01066662,
			      0.0107159 , 0.01076541, 0.01081514, 0.01086511, 0.01091531,
			      0.01096574, 0.01101641, 0.0110673 , 0.01111844, 0.01116981,
			      0.01122141, 0.01127326, 0.01132534, 0.01137767, 0.01143023,
			      0.01148304, 0.0115361 , 0.0115894 , 0.01164294, 0.01169674,
			      0.01175078, 0.01180507, 0.01185961, 0.0119144 , 0.01196945,
			      0.01202475, 0.01208031, 0.01213612, 0.01219219, 0.01224852,
			      0.01230511, 0.01236196, 0.01241908, 0.01247646, 0.0125341 ,
			      0.01259201, 0.01265019, 0.01270863, 0.01276735, 0.01282634,
			      0.0128856 , 0.01294513, 0.01300494, 0.01306503, 0.01312539,
			      0.01318603, 0.01324695, 0.01330816, 0.01336964, 0.01343141,
			      0.01349347, 0.01355581, 0.01361844, 0.01368136, 0.01374457,
			      0.01380807, 0.01387187, 0.01393596, 0.01400035, 0.01406503,
			      0.01413002, 0.0141953 , 0.01426088, 0.01432677, 0.01439296,
			      0.01445946, 0.01452627, 0.01459338, 0.01466081, 0.01472854,
			      0.01479659, 0.01486495, 0.01493363, 0.01500263, 0.01507194,
			      0.01514158, 0.01521154, 0.01528182, 0.01535242, 0.01542335,
			      0.01549461, 0.0155662 , 0.01563812, 0.01571037, 0.01578295,
			      0.01585587, 0.01592913, 0.01600273, 0.01607666, 0.01615094,
			      0.01622556, 0.01630053, 0.01637584, 0.0164515 , 0.01652751,
			      0.01660387, 0.01668058, 0.01675765, 0.01683507, 0.01691285,
			      0.01699099, 0.01706949, 0.01714836, 0.01722759, 0.01730718,
			      0.01738714, 0.01746747, 0.01754818, 0.01762925, 0.0177107 ,
			      0.01779253, 0.01787474, 0.01795732, 0.01804029, 0.01812364,
			      0.01820737, 0.01829149, 0.018376  , 0.0184609 , 0.0185462 ,
			      0.01863188, 0.01871797, 0.01880445, 0.01889133, 0.01897861,
			      0.01906629, 0.01915438, 0.01924288, 0.01933179, 0.0194211 ,
			      0.01951083, 0.01960098, 0.01969154, 0.01978251, 0.01987391,
			      0.01996573, 0.02005798, 0.02015065, 0.02024375, 0.02033728,
			      0.02043124, 0.02052564, 0.02062047, 0.02071574, 0.02081145,
			      0.02090761, 0.0210042 , 0.02110125, 0.02119874, 0.02129668,
			      0.02139508, 0.02149392, 0.02159323, 0.021693  , 0.02179322,
			      0.02189391, 0.02199506, 0.02209669, 0.02219878, 0.02230134,
			      0.02240437, 0.02250789, 0.02261188, 0.02271635, 0.0228213 ,
			      0.02292674, 0.02303267, 0.02313908, 0.02324599, 0.02335339,
			      0.02346129, 0.02356968, 0.02367858, 0.02378798, 0.02389788,
			      0.0240083 , 0.02411922, 0.02423066, 0.02434261, 0.02445507,
			      0.02456806, 0.02468157, 0.0247956 , 0.02491016, 0.02502525,
			      0.02514087, 0.02525703, 0.02537372, 0.02549095, 0.02560873,
			      0.02572704, 0.02584591, 0.02596532, 0.02608529, 0.0262058 ,
			      0.02632688, 0.02644852, 0.02657071, 0.02669347, 0.0268168 ,
			      0.0269407 , 0.02706517, 0.02719022, 0.02731584, 0.02744205,
			      0.02756884, 0.02769621, 0.02782417, 0.02795272, 0.02808187,
			      0.02821161, 0.02834196, 0.0284729 , 0.02860445, 0.02873661,
			      0.02886938, 0.02900276, 0.02913676, 0.02927138, 0.02940662,
			      0.02954248, 0.02967897, 0.02981609, 0.02995385, 0.03009224,
			      0.03023127, 0.03037095, 0.03051127, 0.03065224, 0.03079386,
			      0.03093613, 0.03107906, 0.03122265, 0.03136691, 0.03151183,
			      0.03165742, 0.03180368, 0.03195062, 0.03209824, 0.03224654,
			      0.03239552, 0.0325452 , 0.03269556, 0.03284662, 0.03299838,
			      0.03315084, 0.033304  , 0.03345787, 0.03361245, 0.03376775,
			      0.03392376, 0.0340805 , 0.03423795, 0.03439614, 0.03455506,
			      0.03471471, 0.0348751 , 0.03503623, 0.0351981 , 0.03536072,
			      0.0355241 , 0.03568822, 0.03585311, 0.03601876, 0.03618517,
			      0.03635235, 0.03652031, 0.03668904, 0.03685855, 0.03702884,
			      0.03719992, 0.03737179, 0.03754446, 0.03771792, 0.03789219,
			      0.03806725, 0.03824313, 0.03841982, 0.03859733, 0.03877566,
			      0.03895481, 0.03913479, 0.0393156 , 0.03949724, 0.03967973,
			      0.03986305, 0.04004723, 0.04023225, 0.04041814, 0.04060488,
			      0.04079248, 0.04098095, 0.04117029, 0.0413605 , 0.04155159,
			      0.04174357, 0.04193643, 0.04213019, 0.04232484, 0.04252039,
			      0.04271684, 0.0429142 , 0.04311247, 0.04331166, 0.04351177,
			      0.0437128 , 0.04391476, 0.04411765, 0.04432149, 0.04452626,
			      0.04473198, 0.04493865, 0.04514627, 0.04535486, 0.04556441,
			      0.04577492, 0.04598641, 0.04619888, 0.04641233, 0.04662676,
			      0.04684218, 0.0470586 , 0.04727602, 0.04749445, 0.04771388,
			      0.04793433, 0.04815579, 0.04837828, 0.0486018 , 0.04882635,
			      0.04905194, 0.04927857, 0.04950624, 0.04973497, 0.04996476,
			      0.0501956 , 0.05042752, 0.0506605 , 0.05089456, 0.0511297 ,
			      0.05136593, 0.05160325, 0.05184167, 0.05208119, 0.05232181,
			      0.05256355, 0.0528064 , 0.05305038, 0.05329548, 0.05354172,
			      0.05378909, 0.05403761, 0.05428727, 0.05453809, 0.05479006,
			      0.0550432 , 0.05529751, 0.055553  , 0.05580966, 0.05606752,
			      0.05632656, 0.0565868 , 0.05684824, 0.05711089, 0.05737475,
			      0.05763983, 0.05790614, 0.05817368, 0.05844245, 0.05871247,
			      0.05898373, 0.05925625, 0.05953002, 0.05980506, 0.06008137,
			      0.06035896, 0.06063783, 0.06091799, 0.06119944, 0.06148219,
			      0.06176625, 0.06205162, 0.06233831, 0.06262633, 0.06291567,
			      0.06320636, 0.06349838, 0.06379176, 0.06408649, 0.06438258,
			      0.06468004, 0.06497887, 0.06527909, 0.06558069, 0.06588368,
			      0.06618808, 0.06649388, 0.0668011 , 0.06710973, 0.06741979,
			      0.06773128, 0.06804421, 0.06835859, 0.06867442, 0.06899171,
			      0.06931046, 0.06963069, 0.0699524 , 0.07027559, 0.07060028,
			      0.07092646, 0.07125416, 0.07158337, 0.07191409, 0.07224635,
			      0.07258014, 0.07291548, 0.07325236, 0.0735908 , 0.0739308 ,
			      0.07427238, 0.07461553, 0.07496027, 0.0753066 , 0.07565453,
			      0.07600407, 0.07635522, 0.076708  , 0.0770624 , 0.07741845,
			      0.07777613, 0.07813547, 0.07849647, 0.07885914, 0.07922349,
			      0.07958951, 0.07995723, 0.08032665, 0.08069778, 0.08107061,
			      0.08144518, 0.08182147, 0.0821995 , 0.08257928, 0.08296081,
			      0.0833441 , 0.08372917, 0.08411601, 0.08450464, 0.08489507,
			      0.0852873 , 0.08568135, 0.08607721, 0.0864749 , 0.08687443,
			      0.08727581, 0.08767904, 0.08808414, 0.0884911 , 0.08889995,
			      0.08931068, 0.08972331, 0.09013785, 0.09055431, 0.09097268,
			      0.091393  , 0.09181525, 0.09223945, 0.09266562, 0.09309375,
			      0.09352386, 0.09395596, 0.09439005, 0.09482615, 0.09526427,
			      0.09570441, 0.09614658, 0.09659079, 0.09703706, 0.09748539,
			      0.09793579, 0.09838827, 0.09884285, 0.09929952, 0.0997583 ,
			      0.1002192 , 0.10068224, 0.10114741, 0.10161473, 0.10208421,
			      0.10255586, 0.10302968, 0.1035057 , 0.10398392, 0.10446434,
			      0.10494699, 0.10543186, 0.10591898, 0.10640834, 0.10689997,
			      0.10739387, 0.10789005, 0.10838852, 0.10888929, 0.10939238,
			      0.1098978 , 0.11040555, 0.11091564, 0.11142809, 0.11194291,
			      0.11246011, 0.1129797 , 0.11350168, 0.11402608, 0.1145529 ,
			      0.11508216, 0.11561386, 0.11614802, 0.11668465, 0.11722375,
			      0.11776535, 0.11830945, 0.11885606, 0.1194052 , 0.11995687,
			      0.12051109, 0.12106788, 0.12162723, 0.12218918, 0.12275371,
			      0.12332086, 0.12389062, 0.12446302, 0.12503806, 0.12561576,
			      0.12619613, 0.12677918, 0.12736493, 0.12795338, 0.12854455,
			      0.12913845, 0.12973509, 0.13033449, 0.13093666, 0.13154161,
			      0.13214936, 0.13275992, 0.13337329, 0.1339895 , 0.13460856,
			      0.13523048, 0.13585527, 0.13648294, 0.13711352, 0.13774701,
			      0.13838343, 0.13902279, 0.1396651 , 0.14031038, 0.14095864,
			      0.14160989, 0.14226416, 0.14292144, 0.14358177, 0.14424514,
			      0.14491158, 0.1455811 , 0.14625372, 0.14692944, 0.14760828,
			      0.14829026, 0.14897538, 0.14966368, 0.15035515, 0.15104982,
			      0.1517477 , 0.1524488 , 0.15315315, 0.15386074, 0.15457161,
			      0.15528576, 0.15600321, 0.15672397, 0.15744807, 0.15817551,
			      0.15890631, 0.15964049, 0.16037806, 0.16111903, 0.16186343,
			      0.16261127, 0.16336257, 0.16411733, 0.16487559, 0.16563734,
			      0.16640262, 0.16717143, 0.1679438 , 0.16871973, 0.16949924,
			      0.17028236, 0.1710691 , 0.17185947, 0.1726535 , 0.17345119,
			      0.17425256, 0.17505764, 0.17586644, 0.17667898, 0.17749527,
			      0.17831533, 0.17913918, 0.17996684, 0.18079832, 0.18163364,
			      0.18247283, 0.18331589, 0.18416284, 0.18501371, 0.18586851,
			      0.18672725, 0.18758997, 0.18845667, 0.18932737, 0.1902021 ,
			      0.19108087, 0.1919637 , 0.19285061, 0.19374162, 0.19463674,
			      0.195536  , 0.19643941, 0.197347  , 0.19825878, 0.19917477,
			      0.200095  , 0.20101948, 0.20194822, 0.20288126, 0.20381861,
			      0.20476029, 0.20570633, 0.20665673, 0.20761152, 0.20857073,
			      0.20953436, 0.21050245, 0.21147501, 0.21245207, 0.21343364,
			      0.21441974, 0.2154104 , 0.21640564, 0.21740547, 0.21840993,
			      0.21941902, 0.22043278, 0.22145122, 0.22247437, 0.22350224,
			      0.22453486, 0.22557226, 0.22661444, 0.22766145, 0.22871328,
			      0.22976998, 0.23083156, 0.23189805, 0.23296946, 0.23404583,
			      0.23512716, 0.23621349, 0.23730485, 0.23840124, 0.2395027 ,
			      0.24060925, 0.24172091, 0.2428377 , 0.24395966, 0.2450868 ,
			      0.24621915, 0.24735673, 0.24849956, 0.24964768, 0.2508011 ,
			      0.25195984, 0.25312395, 0.25429343, 0.25546831, 0.25664862,
			      0.25783439, 0.25902563, 0.26022238, 0.26142466, 0.26263249,
			      0.2638459 , 0.26506492, 0.26628957, 0.26751988, 0.26875587,
			      0.26999757, 0.27124501, 0.27249822, 0.27375721, 0.27502202,
			      0.27629267, 0.2775692 , 0.27885162, 0.28013997, 0.28143427,
			      0.28273455, 0.28404084, 0.28535316, 0.28667154, 0.28799602,
			      0.28932662, 0.29066336, 0.29200628, 0.2933554 , 0.29471076,
			      0.29607238, 0.29744029, 0.29881452, 0.3001951 , 0.30158206,
			      0.30297543, 0.30437523, 0.3057815 , 0.30719427, 0.30861357,
			      0.31003942, 0.31147186, 0.31291092, 0.31435663, 0.31580902,
			      0.31726811, 0.31873395, 0.32020656, 0.32168598, 0.32317223,
			      0.32466535, 0.32616536, 0.32767231, 0.32918622, 0.33070712,
			      0.33223505, 0.33377004, 0.33531212, 0.33686132, 0.33841769,
			      0.33998124, 0.34155202, 0.34313005, 0.34471538, 0.34630803,
			      0.34790804, 0.34951544, 0.35113027, 0.35275256, 0.35438234,
			      0.35601965, 0.35766453, 0.35931701, 0.36097712, 0.36264491,
			      0.36432039, 0.36600362, 0.36769463, 0.36939345, 0.37110012,
			      0.37281467, 0.37453714, 0.37626758, 0.378006  , 0.37975246,
			      0.38150699, 0.38326963, 0.38504041, 0.38681937, 0.38860654,
			      0.39040198, 0.39220571, 0.39401778, 0.39583821, 0.39766706,
			      0.39950436, 0.40135014, 0.40320446, 0.40506734, 0.40693883,
			      0.40881896, 0.41070778, 0.41260533, 0.41451165, 0.41642677,
			      0.41835074, 0.4202836 , 0.42222539, 0.42417615, 0.42613592,
			      0.42810475, 0.43008268, 0.43206974, 0.43406599, 0.43607145,
			      0.43808619, 0.44011023, 0.44214362, 0.44418641, 0.44623863,
			      0.44830034, 0.45037157, 0.45245238, 0.45454279, 0.45664287,
			      0.45875264, 0.46087217, 0.46300148, 0.46514064, 0.46728968,
			      0.46944864, 0.47161758, 0.47379655, 0.47598558, 0.47818472,
			      0.48039403, 0.48261354, 0.4848433 , 0.48708337, 0.48933379,
			      0.4915946 , 0.49386586, 0.49614762, 0.49843991, 0.5007428 ,
			      0.50305633, 0.50538054, 0.5077155 , 0.51006124, 0.51241782,
			      0.51478529, 0.51716369, 0.51955309, 0.52195352, 0.52436505,
			      0.52678771, 0.52922157, 0.53166667, 0.53412308, 0.53659083,
			      0.53906998, 0.54156058, 0.5440627 , 0.54657637, 0.54910166,
			      0.55163861, 0.55418728, 0.55674773, 0.55932001, 0.56190418,
			      0.56450028, 0.56710838, 0.56972853, 0.57236078, 0.5750052 ,
			      0.57766183, 0.58033074, 0.58301198, 0.5857056 , 0.58841168,
			      0.59113025, 0.59386138, 0.59660513, 0.59936156, 0.60213073,
			      0.60491269, 0.6077075 , 0.61051522, 0.61333592, 0.61616965,
			      0.61901647, 0.62187644, 0.62474963, 0.62763609, 0.63053589,
			      0.63344908, 0.63637574, 0.63931591, 0.64226968, 0.64523708,
			      0.6482182 , 0.65121309, 0.65422182, 0.65724445, 0.66028104,
			      0.66333167, 0.66639639, 0.66947526, 0.67256837, 0.67567576,
			      0.67879751, 0.68193368, 0.68508435, 0.68824957, 0.69142941,
			      0.69462394, 0.69783324, 0.70105736, 0.70429638, 0.70755036,
			      0.71081938, 0.7141035 , 0.71740279, 0.72071733, 0.72404718,
			      0.72739242, 0.73075311, 0.73412933, 0.73752114, 0.74092863,
			      0.74435186, 0.74779091, 0.75124584, 0.75471674, 0.75820368,
			      0.76170672, 0.76522595, 0.76876144, 0.77231326, 0.7758815 ,
			      0.77946622, 0.7830675 , 0.78668542, 0.79032006, 0.79397148,
			      0.79763978, 0.80132503, 0.8050273 , 0.80874668, 0.81248325,
			      0.81623707, 0.82000824, 0.82379684, 0.82760293, 0.83142662,
			      0.83526797, 0.83912706, 0.84300399, 0.84689883, 0.85081166,
			      0.85474257, 0.85869164, 0.86265896, 0.86664461, 0.87064867,
			      0.87467124, 0.87871238, 0.8827722 , 0.88685078, 0.8909482 ,
			      0.89506455, 0.89919991, 0.90335439, 0.90752806, 0.91172101,
			      0.91593333, 0.92016512, 0.92441646, 0.92868743, 0.93297815,
			      0.93728868, 0.94161913, 0.94596959, 0.95034015, 0.9547309 ,
			      0.95914194, 0.96357336, 0.96802525, 0.97249771, 0.97699084,
			     0.98150472, 0.98603946, 0.99059515, 0.99517189, 0.99976977};
  
  std::ofstream fw(OutName+"_NNGrid.dat", std::ofstream::out);
  int iSet=0;
  if(fw.is_open())
    {
  for (auto set:sets)
    {
      for(auto x:xgrid)
	fw<<set(x,5)[6]<<", ";
      fw<<"\n";
	
      iSet++;
    }}
  fw.close();

  return 0;
}
